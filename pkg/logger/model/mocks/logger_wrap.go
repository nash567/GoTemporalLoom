package mocks

// Code generated by (wrapping method of mock logger)
import "github.com/CarringtonLabs/cl-backend-core/pkg/logger/model"

// MockLogger is a wrapper of mock type for the Logger type.
type MockLogger struct {
	Logger
}

// Debug provides a mock function with given fields: msg.
func (_m MockLogger) Debug(msg string) {
	_m.Logger.Debug(msg)
}

// Error provides a mock function with given fields: msg.
func (_m MockLogger) Error(msg string) {
	_m.Logger.Error(msg)
}

// Info provides a mock function with given fields: msg.
func (_m MockLogger) Info(msg string) {
	_m.Logger.Info(msg)
}

// Warn provides a mock function with given fields: msg.
func (_m MockLogger) Warn(msg string) {
	_m.Logger.Warn(msg)
}

// WithError provides a mock function with given fields: err.
func (_m MockLogger) WithError(err error) model.Logger {
	return _m.Logger.WithError(err)
}

// WithField provides a mock function with given fields: key, value.
func (_m MockLogger) WithField(key string, value interface{}) model.Logger {
	return _m.Logger.WithField(key, value)
}

// WithFields provides a mock function with given fields: fields.
func (_m MockLogger) WithFields(fields model.Fields) model.Logger {
	return _m.Logger.WithFields(fields)
}

// WithFields provides a mock function with given fields: fields.
func (_m MockLogger) ToKeyValLogger() model.KeyValLogger {
	return _m.Logger.ToKeyValLogger()
}
